{"name":"Ti.ux.templates","tagline":"The Titanium UX Templates Library","body":"\r\n# The Titanium UX Library\r\n\r\n## Disclaimer\r\n\r\nThis project is under active development and its actual status is in alpha or “preview” phase. Some parts can drastically change in short term. \r\n\r\nUse under your own risk. Bug reports, pull requests and any kind of collaboration are welcome.\r\n\r\n## Description\r\n\r\nThe Titanium UX project arises to solve some common UX patterns that we use in our apps every day with Titanium Alloy.\r\n\r\nThe added value of this project is that each template and component is the result of a collaboration between an UX expert and a Titanium developer, \r\nand improved with cool designs done by pro apps designers.\r\n\r\nThe result is a collection of Templates with all the sources (mock up files for Omni-Graffle, designs in Illustrator and code in Titanium Alloy).\r\n\r\nRegarding the code, the project now includes 3 templates with more than 20 reusable and customizable widgets of all kinds.\r\n\r\nWe are doing a big effort in creating useful widgets, with performance in mind and specially high integration with Alloy, so they can be added\r\nto your xml files and 100% customizables from style files.\r\n\r\nFind more info about ux mobile patterns in our website [www.uxmobilepatterns.com](http://www.uxmobilepatterns.com) or contact us by twitter at @jrayon and @sonianoneka\r\n\r\n##Multiplatform Support\r\n\r\nThe project has been developed and fully works on iPhone. Although the UX has been designed with iPhone users in mind, most components also work on android\r\nand our intention is to give full support to get the templates and widgets working in both platforms.\r\n\r\n\r\n## Templates\r\n\r\n### Franky: a detail view full of small widgets\r\n\r\nFranky is our little monster. After review hundred of detail views in mobile apps, Sonia found the kind of components more usable and used\r\nand put them all in a unique view, as a sample of what a detail view commonly includes.\r\n\r\nThis pattern will help you understand not only how to structure a kind of window like this, but also to have quick access to\r\na library of ready-to-use components that you can reuse.\r\n\r\nIt uses several custom widgets ready to reuse and support for [FontAwesome icons](http://fortawesome.github.io/Font-Awesome/)\r\n\r\n![Franky Template: a detail view](https://raw.githubusercontent.com/jaraen/Ti.UX.Templates/master/screenshots/widgets%20franky%201.png)\r\n![Franky Template: a detail view](https://raw.githubusercontent.com/jaraen/Ti.UX.Templates/master/screenshots/widgets%20franky%202.png)\r\n\r\n### Settings form: a template for modifying and input data\r\n\r\nAll we know what a settings form is, how often we use and develop them for apps and how long it takes to get fully working, \r\nincluding data validation, option pickers and so on.\r\n\r\nThis template will boost the process of creating new forms and will do it super easy to edit and maintain.\r\n\r\n![Settings: A Form template](https://raw.githubusercontent.com/jaraen/Ti.UX.Templates/master/screenshots/widgets%20form%20settings.png)\r\n\r\n### Sign up form: a step-by-step form template\r\n\r\nIt is becoming more than usual that some input data processes, as for example sign up, buying process and so on, are made in a step-by-step way, \r\nso the user is more comfortable and not swamped by a large quantity of data to fill in.\r\n\r\nThis example adds all the needed logic to create the step-by-step navigation and also adds an high level of customization for your process. \r\n\r\nBy now, only text fields are supported, with several validation methods, support for custom validation methods, synchronous and asynchronous validation and\r\ninvalid data detection.\r\n\r\n![Sign up form: a step-by-step form template](https://raw.githubusercontent.com/jaraen/Ti.UX.Templates/master/screenshots/widgets%20form%20signup.png)\r\n\r\n### List: a template full of interaction samples\r\n\r\ncoming soon...\r\n\r\n## Component Widgets\r\n\r\n### com.criteriastudio.RemoteImageView\r\n\r\n\r\nAn image view that downloads and automatically manages its own cache. Also works with local images.\r\n\r\nIt also adds properties to the image, doing it `zoomable`, it is, click for view fullscreen and pinch in for zoomin.\r\n\r\nFeatures:\r\n - manages its own local cache\r\n - shows a loading indicator with progress while loads a remote picture\r\n - set zoomable property to true open a new window with a zoomable fullscreen image, showing an small loupe icon\r\n - Support for retina images after saving in cache\r\n - Also works with local images\r\n\r\n### ti.ux.alignview\r\n\r\nDistributes horizontally all children elements added in its creation.\r\n\r\nIf no `width` is set, it takes the parent width. You can set `width` property if the view is smaller than the parent or if the parent view is a \r\nscrollView where you want to align all the elements.\r\n\r\n\r\n### ti.ux.image\r\n\r\nthis component envelopes com.criteriastudio.RemoteImageView widget for easier management.\r\nAlso adds vertical parallax FX to it.\r\n\r\nUse `innerMargin` to set the limits of the parallax fx. Use `realTop` property indicating the real from the window top edge. This is required to correctly manage\r\nthe scroll event by the parent container (tipically a table view or a scrollview)\r\n\r\n\r\n### ti.ux.expandabletext\r\n\r\nA clickable label that expands its size. Properties accepted:\r\n\r\n `height` \r\n\r\nUses style `paragraph` \r\n\r\n### ti.ux.forms.row.optionspicker\r\n\r\nExtends TableViewRow to be used in a settings form. Clicking on it, opens a selector of options.\r\n\r\nProperties:\r\n\r\n`title`: Title to show in the row\r\n`options` : array of string with the options to show to the user\r\n`type`: Type of dialog to show. optionsdialog | popup | modalwindow\t//now only optionsdialog works\r\n`value`: index of the selected value by default\r\n`cancel`: cancel option index in `options` (optional)\r\n\r\n\r\n### ti.ux.forms.row.switch\r\n\r\nExtends TableViewRow to be used in a settings form. Adds a switch and a title to the row\r\n\r\nProperties:\r\n\r\n`title`: Title to show in the row\r\n`value` : true | false Default value for the switch\r\n\r\n\r\n### ti.ux.forms.row.text\r\n\r\nExtends TableViewRow to be used in a settings form. Adds a text field to the form\r\n\r\nProperties:\r\n\r\n`title`\r\n`hintText`\r\n`type`\r\n`value`\r\n\r\nIn development: support for different validation methods and keyboards just setting the type property\r\n\r\n\r\n### ti.ux.forms.scrollableform\r\n\r\n`<Widget src=\"ti.ux.forms.scrollableform\" id=\"form\"></Widget>`\r\n\r\nCreates a form assistant (each field in one scrollable view). Initialize the widget with a json data structure, \r\nindicating the fields to create, properties for each field, callback methods (in case it is cancelled or validated).\r\n\r\nA validation method is automatically assigned to each field depending on its `type` property. A custom validator method\r\ncan be declared for each field.\r\n\r\nDeclaring a `type` customizes the keyboard, passwordMask and validator method. Supported types are:\r\n\r\n`text`\r\n`password` \r\n`email`\r\n`phone`\r\n`number`\r\n`url`\r\n\r\nDefault type is `text` \r\n\r\nThis is an example of json form data:\r\n\r\n\r\n```javascript\r\n\r\nvar formData = {\r\n\tfields: [\r\n\t\t{\r\n\t\t\tid: 'username',\r\n\t\t\ttitle:'username',\r\n\t\t\tinputType:'text',\r\n\t\t\tmandatory: true,\r\n\t\t\ttipText:'Please, fill in your name',\r\n\t\t\tautofocus: true\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\tid:'website',\r\n\t\t\ttitle:'Your website',\r\n\t\t\tinputType:'url',\r\n\t\t\tmandatory: false,\r\n\t\t\ttipText: 'Please, fill in a valid website or leave it blank.',\r\n\t\t\tautofocus: true\r\n\t\t},\r\n\t\t\r\n\t\t{\r\n\t\t\tid:'email',\r\n\t\t\ttitle:'e-mail',\r\n\t\t\tinputType:'email',\t\t\t//e-mail includes its own validate method, so no need to overwrite it\r\n\t\t\tmandatory: false,\r\n\t\t\ttipText:'Please, fill in your e-mail account',\r\n\t\t\tautofocus: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tid:'password',\r\n\t\t\ttitle:'password',\r\n\t\t\tinputType:'password',\r\n\t\t\tmandatory: true,\r\n\t\t\thintText:'6 characters at least',\r\n\t\t\ttipText:'Set your password',\r\n\t\t\terrorText: 'The password must contain at least 6 characters',\r\n\t\t\tautofocus: true,\r\n\t\t\tvalidate:function(value){\t//customize our own password validation\r\n\t\t\t\tTi.API.info('custom validation called w value: ' + value);\r\n\t\t\t\treturn value && (\"\"+value).length >= 6;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tid:'confirm-password',\r\n\t\t\ttitle:'Confirm password',\r\n\t\t\tinputType:'password',\r\n\t\t\tmandatory: true,\r\n\t\t\thintText:'6 characters at least',\r\n\t\t\ttipText:'Repeat the same password, please.',\r\n\t\t\terrorText: 'The passwords does not match.',\r\n\t\t\tautofocus: true,\r\n\t\t\tvalidate:function(value){\t//customize our own password validation\r\n\t\t\t\treturn value == $.form.getFieldValue('password');\t\t//you can query any form password already introduced\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tid:'phone',\r\n\t\t\ttitle:'mobile number',\r\n\t\t\tinputType:'phone',\r\n\t\t\tmandatory: false,\r\n\t\t\ttipText:'Insert your phone number',\r\n\t\t\tautofocus: true\r\n\t\t}\r\n\t],\r\n\tonCancel: function(e){\t\t\t\t\t\t//Cancel callback function\r\n\t\talert('form cancelled');\r\n\t},\r\n\t\r\n\tonFinish: function(data){\t\t\t\t\t//Callback called after last field is validated\r\n\t\talert(\"This is your form result: \\n\\n\" + JSON.stringify(data, '', 4));\r\n\t\t$.win.close();\r\n\t},\r\n\t\r\n\tonFieldValidated: function(data){\t\t\t//Callback called each time a field is validated\r\n\t\tTi.API.info('Field validated: ' + JSON.stringify(data));\r\n\t}\r\n};\r\n\r\n```\r\n\r\nTo create the form, just call it in you `onOpen`  window event:\r\n\r\n```javascript\r\nfunction initForm(){\r\n\t$.form.init(formData);\r\n}\r\n```\r\n\r\n##### About validators\r\n\r\nValidators may include or not a callback function. A callback function can be useful when the validation requires \r\na remote connection (for example, to check if a username already exists). If a callback function is used, an \r\nactivityIndicator is shown during the validation.\r\n\r\nHave a look to lib/validators.js to see a few examples of validators.\r\n\r\n\r\n### ti.ux.forms.text\r\n\r\nA boxed label and textfield with validation methods. Includes a titles above the textfield.\r\n\r\n### ti.ux.iconbutton\r\n\r\nA button that accepts [FontAwesome 4.1.0 codes](http://fortawesome.github.io/Font-Awesome/icons/). Fully customizable.\r\n\r\n### ti.ux.iconfont\r\n\r\nA label that accepts [FontAwesome 4.1.0 codes](http://fortawesome.github.io/Font-Awesome/icons/) codes\r\n\r\n### ti.ux.iconlabel\r\n\r\nAn icon with a label besides it. The icon can be an image, using `image` property or a \r\n[FontAwesome 4.1.0 codes](http://fortawesome.github.io/Font-Awesome/icons/) code using `icon` property.\r\n\r\n### ti.ux.iconvalue\r\n\r\nAn icon with a label below it. The icon can be an image, using `image` property or a \r\n[FontAwesome 4.1.0 codes](http://fortawesome.github.io/Font-Awesome/icons/) code using `icon` property.\r\n\r\n### ti.ux.pagingcontrol\r\n\r\nA paging control that can be embebbed to any scrollable view and stylized in style files.\r\n\r\nThe widget can be declared in Alloy in the xml view file, but must be initialized in code, after the scrollable view is drawn.\r\n\r\n```xml\r\n<ScrollableView id=\"scrollableView\" onPostlayout=\"linkScrollableView\" onScrollEnd=\"updatePagingControl\">\r\n\t<Label text=\"View 1\" />\r\n\t<Label text=\"View 2\" />\r\n\t<Label text=\"View 3\" />\r\n</ScrollableView>\r\n<Widget src=\"ti.ux.pagingcontrol\" id=\"pagingControl\" backgroundColor=\"#fff\" top=\"0\"/>\r\n\r\n```\r\n\r\nThen, in the controller\r\n\r\n```javascript\r\n/* SCROLLABLE VIEW FUNCTIONS */\r\n\r\nfunction linkScrollableView(){\r\n\t$.scrollableView.removeEventListener('postlayout', linkScrollableView);\r\n\t$.pagingControl.linkScrollableView($.scrollableView);\r\n}\r\n\r\nfunction updatePagingControl(e){\r\n\t$.pagingControl.setActiveDot(e.currentPage);\r\n}\r\n```\r\n\r\nThis is an example of pagingControl styling:\r\n\r\n```\r\n\".view-pagingcontrol\":{\r\n\theight:\"10\",\r\n//\tbackgroundColor:\"#fff\",\r\n\tzIndex: \"999\",\r\n\twidth: Ti.UI.SIZE\r\n},\r\n\".view-pagingcontrol-dot\":{\r\n\theight:4,\r\n\twidth:4,\r\n\tborderRadius:2\r\n},\r\n\".view-pagingcontrol-dot-active\":{\r\n\tbackgroundColor:\"#000\"\r\n}\r\n\".view-pagingcontrol-dot-inactive\":{\r\n\tbackgroundColor:\"#999\"\r\n}\r\n\r\n```\r\n\r\n\r\n### ti.ux.rowitem\r\n\r\nA `TableViewRow` widget, that accepts `title`, `subtitle` and `count` properties.\r\n\r\n\r\n### ti.ux.scrollableview\r\n\r\nA Titanium ScrollableView with customizable pagingControl through alloy styles. \r\n\r\n### ti.ux.spacer\r\n \r\nA white space widget to leave blank spaces between rows or components. \r\n\r\n### ti.ux.title\r\n\r\nA title label styling class `label-H1`\r\n\r\n## Credits\r\n\r\nDreamed up by Sonia Villanueva and Javier Rayon in 2014.\r\n\r\nUX strategy and mock-ups by Sonia\r\n\r\nTitanium code and documentation by Javier\r\n\r\nThemes designs and extra energy push by **Mai Berreando**. She has contributed with some of the coolest designs we have seen, among some beautiful cactus. ;)\r\n\r\nWe use the incredible work and technology done by:\r\n\r\n- [Font Awesome](http://fortawesome.github.io/Font-Awesome)\r\n\r\n- [Appcelerator](http://www.appcelerator.com)\r\n\r\nOrignal FontAwesome [Titanium module by Kosuke Isobe](https://github.com/k0sukey/TiIconicFont)\r\n\r\n\r\n## License\r\n\r\nAll parts of this project are fully open source and is GPL friendly. You can use it for commercial projects, open source projects, \r\nor really just about whatever you want.\r\n\r\nAttribution is not required, but appreciated. Among anything else, we will love to know how this project may help you.\r\n\r\n.\r\n\r\n.\r\n\r\n.\r\n\r\n.\r\n\r\n.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}